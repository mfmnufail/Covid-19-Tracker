{"version":3,"sources":["util.js","Map.js","InfoBox.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","className","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","color","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","InfoBox","title","isRed","active","total","props","Card","onClick","CardContent","Typography","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callback","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","calLback","index","values","LinteGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","classsName","LineGraph","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41b95fd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle, Popup} from \"react-leaflet\";\r\nimport \"./Map.css\"\r\n\r\nconst casesTypeColors = {\r\n\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier : 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier : 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier : 2000,\r\n    }\r\n}\r\n\r\nexport const sortData = (data) =>{\r\n\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a,b) => a.cases>b.cases ? -1 : 1 );\r\n\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"; \r\n\r\nexport const showDataOnMap = (data, casesType ='cases') =>(\r\n\r\n    data.map((country) =>\r\n    <Circle center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n    fillOpacity = {0.4}\r\n    fillColor = {casesTypeColors[casesType].hex}\r\n    color = {casesTypeColors[casesType].hex}\r\n    radius = {\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n    >\r\n        <Popup className = \"info-container\">\r\n            <div>\r\n                <div className = \"info-flag\" style = {{backgroundImage : `url(${country.countryInfo.flag})`}}/>\r\n                <div className = \"info-country\">{country.country}</div>\r\n                <div className = \"info-name\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className = \"info-name\">Recovered :{numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className = \"info-name\">Deaths :{numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n\r\n        </Popup>\r\n    </Circle>\r\n    )\r\n    \r\n    \r\n)","import React from 'react'\r\nimport \"./Map.css\"\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport { Circle } from 'leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries,casesType, center , zoom}) {\r\n    return (\r\n        <div className = 'map'>\r\n            <LeafletMap center = {center} zoom = {zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport \"./InfoBox.css\"\r\n\r\n\r\n\r\nfunction InfoBox({title, cases,isRed, active,total, ...props}) {\r\n    return (\r\n            <Card className = {`infoBox  ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}\r\n                onClick = {props.onClick}\r\n            >\r\n                <CardContent>\r\n                    <Typography color = \"textSecondary\" className=\"infoBox__title\">{title}</Typography>\r\n                    <h2 className = {`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                    <Typography color = \"textSecondary\" className = \"infoBox__total\">{total} Total</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        \r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport \"./Table.css\"\r\nimport numeral from 'numeral'\r\n\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className= \"table\">\r\n            {countries.map((country) => (\r\n                <tr>\r\n                    <td>{country.country}</td>\r\n                     <td>\r\n                          <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                     </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral'\r\n\r\nconst options = {\r\n    legend : {\r\n        display : false\r\n    },\r\n\r\n    elements: {\r\n        point: {\r\n            radius : 0,\r\n        },\r\n    },\r\n\r\n    maintainAspectRatio : false,\r\n    tooltips : {\r\n        mode : \"index\",\r\n        intersect : false,\r\n        callback: {\r\n            label : function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n\r\n    scales : {\r\n        xAxes: [\r\n            {\r\n                type:\"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat : \"ll\"\r\n                }\r\n            }\r\n        ],\r\n\r\n        yAxes : [\r\n            {\r\n                gridLines : {\r\n                    display:false,\r\n                },\r\n                ticks: {\r\n                    calLback : function (value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\n\r\nfunction LinteGraph({casesType = \"cases\", className}) {\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    const buildChartData = (data, casesType = \"cases\") => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n       for (let date in data.cases) {\r\n\r\n            if (lastDataPoint){\r\n                const newDataPoint = {\r\n                    x:date,\r\n                    y:data[casesType][date] - lastDataPoint\r\n                };\r\n\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n\r\n        return chartData;\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            \r\n           let chartData =  buildChartData(data, casesType);\r\n           setData(chartData);\r\n        })\r\n    }\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n\r\n   \r\n    return (\r\n        <div className = {className}>\r\n            {data?.length>0  && (\r\n                    <Line options = {options} \r\n                    data= {{\r\n                        datasets: [{\r\n                            backgroundColor : \"rgba(204, 16, 52, 0.5 )\",\r\n                            borderColor : \"#CC1034\",\r\n                            data:data\r\n                        },],\r\n                    }}   />\r\n\r\n            )  }\r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinteGraph\r\n","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport {FormControl,Select, MenuItem, Card, CardContent} from '@material-ui/core';\r\nimport Map from './Map';\r\nimport InfoBox from './InfoBox'\r\nimport Table from './Table'\r\nimport {sortData} from \"./util.js\";\r\nimport LineGraph from './LineGraph'\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport numeral from \"numeral\"\r\nimport {prettyPrintStat} from './util';\r\n\r\n \r\n\r\nfunction App() {\r\n\r\n  const [countries , setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat:34.80746 , lng:-40.4796});\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n\r\n  useEffect(()=>{\r\n\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      setCountryInfo(data);\r\n    })\r\n\r\n  },[])\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n\r\n   const getCountriesData = async () =>{\r\n     await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n     .then((response) => response.json())\r\n     .then((data) => {\r\n       const countries = data.map((country) => ({\r\n           name : country.country,\r\n           value : country.countryInfo.iso2\r\n         }));\r\n\r\n         const sortedData = sortData(data);\r\n         setTableData(sortedData);\r\n       setCountries(countries);\r\n       setMapCountries(data);\r\n\r\n     });\r\n\r\n   };\r\n    getCountriesData();\r\n\r\n  }, []);\r\n\r\n  const onCountryChange = async (event) =>{\r\n\r\n    const countryCode = event.target.value;\r\n    setCountry(countryCode);\r\n\r\n    const url = countryCode ===\"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" \r\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n\r\n     await fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n        setCountryInfo(data);\r\n    })\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n      <div className=\"app__header\">\r\n        <h1>COVID-19 TRACKER </h1>\r\n        <FormControl className = \"app__dropdown\">\r\n            <Select variant = \"outlined\" value ={country} onChange = {onCountryChange} >\r\n              <MenuItem value = \"worldwide\">Worldewide</MenuItem>\r\n          {countries.map((country) => (\r\n            <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n          ))}\r\n         </Select>\r\n        </FormControl>\r\n      </div>\r\n\r\n      <div className=\"app__stats\">\r\n        <InfoBox isRed active = {casesType === \"cases\"} onClick = {e => setCasesType(\"cases\")} title = \"Coronavirus Cases\" cases ={prettyPrintStat(countryInfo.todayCases)} total = {prettyPrintStat(countryInfo.cases)} />\r\n        <InfoBox active = {casesType === \"recovered\"} onClick = {e => setCasesType(\"recovered\")} title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)} total = {prettyPrintStat(countryInfo.recovered)}/>\r\n        <InfoBox isRed active = {casesType === \"deaths\"} onClick = {e => setCasesType(\"deaths\")} title = \"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total = {prettyPrintStat(countryInfo.deaths)}/>\r\n      </div>\r\n\r\n      <Map casesType = {casesType} countries = {mapCountries} center = {mapCenter} zoom = {mapZoom}/>\r\n\r\n      </div>\r\n\r\n      <Card classsName = \"app__right\">\r\n           <CardContent>\r\n            <h3>Live Cases Country</h3>\r\n            <Table countries = {tableData} />\r\n          <h3 className = \"app__graphTitle\">Worldwide New {casesType}</h3>\r\n            <LineGraph className = \"app__graph\" casesType = {casesType}/>\r\n\r\n          </CardContent>\r\n        </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}